/**
 *  This controller will handle only those events generated by the MyApp.view.employee.Form
 */
Ext.define('MyApp.controller.employee.Form', {
    extend: 'Ext.app.Controller',

    config: {

        refs: {
            form: 'employeeform'
        },

        control: {
            'employeeform button[action=showprevious]': {
                'tap': 'showPreviousEmployee'
            },
            'employeeform button[action=shownext]': {
                'tap': 'showNextEmployee'
            },
            'employeeform button[action=save]': {
                'tap': 'saveEmployee'
            },
            'employeeform button[action=cancel]': {
                'tap': 'discardChanges'
            },
            'employeeform button[action=back]': {
                'tap': 'goBackFromEmployeeForm'
            }

        }

    },

    /**
     * init method is called when the application launch. So here we setup the listeners on the application bus.
     */
    init: function(){

        this.getApplication().on({
            'showemployeeform': this.showEmployee,
            scope: this
        });

    },

    /**
     * Gets the values from the current form and applies them into the record.
     * _Note:_ We are **not** saving the record since our proxy retrieves fake data.
     */
    saveEmployee: function(){
        var me = this,
            form = me.getForm(),
            record = form.getRecord(),
            values = form.getValues(),
            errors;

        form.cleanErrors();
        //since we are changing the record we don't want to fire events 
        //so we call beginEdit before setting the values. 
        record.beginEdit();
        //set the form values
        record.set(values);
        //validate the record
        errors = record.validate();

        if(errors.isValid()){
            //if record is valid, then end edit. this method will fire update event on the store
            //in case we have a autoSync true on the store. 
            record.endEdit();
            //we don't sync here since we have always the same fake response.
            //we can sync manually or add autoSync true on the store definition.
            //store.sync(); 
        }else{
            record.cancelEdit();
            //now we call a custom function on the form to display the errors.
            form.showErrors(errors);
        }

    },

    /**
     * When user tap on cancel button we just reset the form. 
     */
    discardChanges: function(){
        var me = this,
            form = me.getForm(),
            record = form.getRecord();

        form.setRecord(record);
        //remove errors in case we have displayed them.
        form.cleanErrors();
    },

    /**
     * Set the given record to the form and makes the form the active item on the parent container which 
     * we know has a card layout.
     */
    showEmployee: function(record){
        var me = this,
            form = me.getForm(),
            container = form.up('container');

        form.setRecord(record);
        container.setActiveItem(form);
    },

    /**
     * Grab the previous record on the store and show its information if the current record is not the first one.
     */
    showPreviousEmployee: function(){
        var me = this,
            form = me.getForm(),
            store = Ext.getStore('Employees'),
            currentRecord = form.getRecord(),
            idx = store.indexOf(currentRecord),
            limit = 0,
            record;

        if(idx > limit){
            record = store.getAt(idx - 1);
            form.setRecord(record);    
        }    

    },

    /**
     * Grab the next record on the store and show its information if the current record is not the last one.
     */
    showNextEmployee: function(){
        var me = this,
            form = me.getForm(),
            store = Ext.getStore('Employees'),
            currentRecord = form.getRecord(),
            idx = store.indexOf(currentRecord),
            limit = store.getCount() - 1,
            record;

        if(idx < limit){
            record = store.getAt(idx + 1);
            form.setRecord(record);    
        }    

    },

    /**
     * Will fire an event on the application event bus to let another controller take care of it.
     */
    goBackFromEmployeeForm: function(){
        this.getApplication().fireEvent('showemployeelist');
    }

});